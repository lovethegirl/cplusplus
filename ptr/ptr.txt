shared_ptr 
如果指针不在任何地方使用，就会自动删除指针。这可以帮助我们彻底消除内存泄露和悬挂指针的问题。
它遵循共享所有权的概念，即不同的shared_ptr对象可以与相同的指针相关联，并且在内部使用引用计数机制来实现。

共享所有权怎样在引用计数的帮助下工作
·当一个新的shared_ptr对象与一个指针相关联时，在它的构造函数中，它将与这个指针相关的引用计数增加1.
·当任何shared_ptr对象超出作用域时，则在其析构函数中将相关指针的引用计数递减1.当引用计数变为0时，意味着没有任何shared_ptr对象与这块内存关联，在这种情况下，它使用“删除”功能删除这块内存


每个shared_ptr对象内部指向两块内存区域
1)指向对象
2)指向用于引用计数的控制数据


shared_ptr的操作

分配好了内存空间，我们就可以使用shared_ptr定义的操作了

    p.get()
    返回p保存的指针

    swap(p,q)
    交换p、q中保存的指针

    shared_ptr<T> p(q)
    p是q的拷贝，它们指向同一块内存，互相关联

    p = q
    用q为p赋值，之后p、q指向同一块内存，q引用计数+1，p（原来内存空间的）引用计数-1

    p.use_count()
    返回与p共享对象的智能指针数量

    shared_ptr<T> p(q,d)
    q是一个可以转换为T*的指针，d是一个可调用对象（作为删除器），p接管q所指对象的所有权，用删除器d代替delete释放内存

    p.reset()
    将p重置为空指针

    p.reset(p)
    将p重置为p（的值）

    p.reset(p,d)
    将p重置为p（的值）并使用d作为删除器



向shared_ptr传递删除器

有时候我们需要用智能指针管理非new的对象，或者是没有析构函数的类，由于shared_ptr默认使用delete来释放内存并执行析构函数，对于以上的两种情况是不适用的，所以我们要传递特别的删除器
struct MyStruct
{
    int *p;
    MyStruct():p(new int(10)) { }   //构造函数中申请了一块内存
                                    //用裸指针管理，不用时需要手动释放
};

void main()
{
    //st是局部的对象，存放在栈区
    //并非由new申请，不可用delete释放内存
    MyStruct st;
        //一个作用域
        {
            shared_ptr<MyStruct> sp(&st, [](MyStruct *ptr) {
                delete(ptr->p);
                ptr->p = nullptr;
                cout << "destructed." << endl;
            });
        }
        // 离开作用域，调用传递的删除器释放sp所指的内存空间
}


